<?xml version="1.0" encoding="UTF-8"?>

<!-- scan: 当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true。 scanPeriod: 设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。当scan为true时，此属性生效。默认的时间间隔为1分钟。
	debug: 当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。 -->
<configuration debug="false" scan="true" scanPeriod="30 seconds">
    <contextName>alipay</contextName>
    
    <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">   
    	<!-- <filter class="ch.qos.logback.core.filter.EvaluatorFilter">  
        	<evaluator> 默认为 ch.qos.logback.classic.boolex.JaninoEventEvaluator   
		        <expression>return message.contains("quartz");</expression>   
		    </evaluator>
		    <OnMismatch>NEUTRAL</OnMismatch>
      		<OnMatch>DENY</OnMatch>
        </filter> -->     
		<layout class="ch.qos.logback.classic.PatternLayout"><!-- [%file:%line]  %method:[%file:%line]-->
            <Pattern><!-- %d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{36} %method[%L]: -%msg%n -->
            [%d{yyyy-MM-dd HH:mm:ss.SSS}]-%level-[%thread]-[biz:%X{biz_seq_no}][sys:%X{sys_seq_no}][%class-%method-%L][%marker][%m]%n
            </Pattern>
        </layout>
    </appender>

    <!-- 全量日志 -->
    <appender name="all_log" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>${LOG_PATH}/${LOG_FILE}</file>
        <!-- <encoder>
            <pattern>[%d{yyyy-MM-dd HH:mm:ss.SSS}]-%level-[biz:%X{biz_seq_no}][sys:%X{sys_seq_no}][%class-%method-%L][%marker][%m]%n</pattern>
        </encoder> -->
        <layout class="ch.qos.logback.classic.PatternLayout"><!-- [%file:%line]  %method:[%file:%line]-->
            <Pattern><!-- %d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{36} %method[%L]: -%msg%n -->
            [%d{yyyy-MM-dd HH:mm:ss.SSS}]-%level-[biz:%X{biz_seq_no}][sys:%X{sys_seq_no}][%class-%method-%L][%marker][%m]%n
            </Pattern>
        </layout>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>${LOG_PATH}/${LOG_FILE}-%d{yyyyMMdd}.%i</fileNamePattern>
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <maxFileSize>500MB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>
            <maxHistory>30</maxHistory>
        </rollingPolicy>
    </appender>
    <appender name="ERROR_FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
            <level>ERROR</level>
        </filter>
        <File>${LOG_PATH}/error.log</File>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>${LOG_PATH}/error-%d{yyyyMMdd}.log.%i
            </fileNamePattern>
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <maxFileSize>500MB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>
            <maxHistory>30</maxHistory>
        </rollingPolicy>
        <layout class="ch.qos.logback.classic.PatternLayout">
            <Pattern><!-- %d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{36} %method[%L]: -%msg%n -->
            [%d{yyyy-MM-dd HH:mm:ss.SSS}]-%level-[biz:%X{biz_seq_no}][sys:%X{sys_seq_no}][%class-%method-%L][%marker][%m]%n
            </Pattern>
        </layout>
    </appender>

    <!-- 按用户输出日志  -->
    <appender name="SIFT" class="ch.qos.logback.classic.sift.SiftingAppender">
        <discriminator>
            <key>CHANNEL_CODE</key>
            <defaultValue>unknown</defaultValue>
        </discriminator>
        <sift>
            <appender name="FILE-${userid}" class="ch.qos.logback.core.FileAppender">
                <file>log/${CHANNEL_CODE}.log</file>
                <append>false</append>
                <layout class="ch.qos.logback.classic.PatternLayout">
                    <pattern>[%contextName][%d{yyyy-MM-dd HH:mm:ss.SSS}]-%-5level-[biz_seq_no:%X{biz_seq_no}][%class{15}-%line]%m%n
                    </pattern>
                </layout>
            </appender>
        </sift>
    </appender>
    
     <!-- 异步输出,生产模式下对性能要求较高启用 -->  
     <appender name ="ASYNC" class= "ch.qos.logback.classic.AsyncAppender">  
            <!-- 不丢失日志.默认的,如果队列的80%已满,则会丢弃TRACT、DEBUG、INFO级别的日志 -->  
            <discardingThreshold >0</discardingThreshold>  
            <!-- 更改默认的队列的深度,该值会影响性能.默认值为256 -->  
            <queueSize>512</queueSize>  
            <!-- 添加附加的appender,最多只能添加一个 -->  
         	<appender-ref ref ="all_log"/>
         	<includeCallerData>true</includeCallerData>  
     </appender>  


    <root level="INFO">
        <appender-ref ref="ASYNC"/>
        <appender-ref ref="STDOUT"/>
        <appender-ref ref="ERROR_FILE"/>
    </root>

    <logger name="sftp" additivity="false" level="DEBUG">
        <appender-ref ref="SIFT"/>
    </logger>


    <logger name="jdbc.sqltiming" level="ERROR" addtivity="false">
        <appender-ref ref="all_log"/>
    </logger>

</configuration>
